--
-- Script was generated by Devart dbForge Studio 2020 for MySQL, Version 9.0.791.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 11.06.2022 8:44:06
-- Server version: 10.5.15
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Drop view `usersBalance`
--
DROP VIEW IF EXISTS usersBalance CASCADE;

--
-- Drop event `CloseMounth`
--
DROP EVENT IF EXISTS CloseMounth;

--
-- Drop function `getUserBalance`
--
DROP FUNCTION IF EXISTS getUserBalance;

--
-- Drop table `Payments`
--
DROP TABLE IF EXISTS Payments;

--
-- Drop table `Statements`
--
DROP TABLE IF EXISTS Statements;

--
-- Drop table `Users`
--
DROP TABLE IF EXISTS Users;

--
-- Create table `Users`
--
CREATE TABLE Users (
  id INT(11) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `Statements`
--
CREATE TABLE Statements (
  user_id INT(11) NOT NULL,
  date DATETIME NOT NULL DEFAULT current_timestamp,
  amount INT(11) NOT NULL,
  PRIMARY KEY (user_id, date)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE Statements 
  ADD CONSTRAINT FK_Statements_Users_id FOREIGN KEY (user_id)
    REFERENCES Users(id) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Create table `Payments`
--
CREATE TABLE Payments (
  id INT(11) NOT NULL AUTO_INCREMENT,
  description VARCHAR(255) NOT NULL,
  date DATETIME NOT NULL DEFAULT current_timestamp,
  amount INT(11) NOT NULL,
  from_id INT(11) DEFAULT NULL,
  to_id INT(11) DEFAULT NULL,
  idempotencyKey VARCHAR(255) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 16,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create index `UK_Payments_Idempotency` on table `Payments`
--
ALTER TABLE Payments 
  ADD UNIQUE INDEX UK_Payments_Idempotency(from_id, idempotencyKey);

--
-- Create foreign key
--
ALTER TABLE Payments 
  ADD CONSTRAINT FK_Payments_Users_from_id FOREIGN KEY (from_id)
    REFERENCES Users(id) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE Payments 
  ADD CONSTRAINT FK_Payments_Users_to_id FOREIGN KEY (to_id)
    REFERENCES Users(id) ON DELETE NO ACTION ON UPDATE NO ACTION;

DELIMITER $$

--
-- Create function `getUserBalance`
--
CREATE FUNCTION getUserBalance(user_id INT)
  RETURNS INT(11)
BEGIN
DECLARE balance INT(11);
DECLARE balanceAtTheEnd INT(11);
DECLARE lastDate DATETIME;
DECLARE debit INT(11);
DECLARE credit INT(11);

SET balanceAtTheEnd = 0;
SET debit = 0;
SET credit = 0;

SELECT
  Statements.amount,
  Statements.date INTO balanceAtTheEnd, lastDate
FROM Statements
WHERE Statements.user_id = user_id
ORDER BY Statements.date DESC
LIMIT 1;

SELECT
  SUM(Payments.amount) INTO debit
FROM Payments
WHERE Payments.to_id = user_id
AND Payments.date > lastDate
GROUP BY Payments.to_id;

SELECT
  SUM(Payments.amount) INTO credit
FROM Payments
WHERE Payments.from_id = user_id
AND Payments.date > lastDate
GROUP BY Payments.from_id;

SET balance = balanceAtTheEnd + debit - credit;

RETURN balance;
END
$$

--
-- Create event `CloseMounth`
--
CREATE EVENT CloseMounth
	ON SCHEDULE EVERY '1' MONTH
	STARTS '2022-06-11 08:40:52'
	DO 
BEGIN

DECLARE done INT DEFAULT FALSE;
DECLARE userId INT(11);
DECLARE usersCur CURSOR FOR SELECT id FROM Users;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

START TRANSACTION;

OPEN usersCur;

users_loop: LOOP
    FETCH usersCur INTO userId;
    IF done THEN
      LEAVE users_loop;
    END IF;
    INSERT INTO Statements VALUES (userId,current_timestamp(),getUserBalance(userId));
  END LOOP;

COMMIT;

END
$$

ALTER EVENT CloseMounth
	ENABLE
$$

DELIMITER ;

--
-- Create view `usersBalance`
--
CREATE 
VIEW usersBalance
AS
SELECT
  `u`.`id` AS `id`,
  `getUserBalance`(`u`.`id`) AS `balance`
FROM `Users` `u`;

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;